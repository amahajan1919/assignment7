"""
Student information for this assignment:

Replace <FULL NAME> with your name.
On my/our honor, Aakanksha Mahajan and Surabhi Arun, this
programming assignment is my own work and I have not provided this code to
any other student.

I have read and understand the course syllabus's guidelines regarding Academic
Integrity. I understand that if I violate the Academic Integrity policy (e.g.
copy code from someone else, have the code generated by an LLM, or give my
code to someone else), the case shall be submitted to the Office of the Dean of
Students. Academic penalties up to and including an F in the course are likely.

UT EID 1: am96292
UT EID 2: sa59594
"""


class Node:
    """
    A modified version of the Node class for linked lists (using proper class
    coding practices). Instead of a data instance variable, this node class has both
    a coefficient and an exponent instance variable, which is used to represent each
    term in a polynomial.
    """

    def __init__(self, coeff, exp, link=None):
        """
        Node Constructor for polynomial linked lists.

        Args:
        - coeff: The coefficient of the term.
        - exp: The exponent of the term.
        - link: The next node in the linked list.
        """
        self.coeff = coeff
        self.exp = exp
        self.next = link

    @property
    def coeff(self):
        """
        Getter method for the coefficient attribute.
        """
        return self.__coeff

    @coeff.setter
    def coeff(self, value):
        """
        Setter method for the coefficient attribute.
        """
        if value is None or isinstance(value, int):
            self.__coeff = value
        else:
            raise ValueError("Coefficient must be an integer or None.")

    @property
    def exp(self):
        """
        Getter method for the exponent attribute.
        """
        return self.__exp

    @exp.setter
    def exp(self, value):
        """
        Setter method for the exponent attribute.
        """
        if value is None or isinstance(value, int):
            self.__exp = value
        else:
            raise ValueError("Exponent must be an integer or None.")

    @property
    def next(self):
        """
        Getter method for the next attribute.
        """
        return self.__next

    @next.setter
    def next(self, value):
        """
        Setter method for the next attribute.
        """
        if value is None or isinstance(value, Node):
            self.__next = value
        else:
            raise ValueError("Next must be a Node instance or None.")

    def __str__(self):
        """
        String representation of each term in a polynomial linked list.
        """
        return f"({self.coeff}, {self.exp})"


class LinkedList:
    """
    A class representing a polynomial as a linked list, where each node stores a term.
    
    Attributes:
    head (Node, optional): The head node of the linked list (first term in the polynomial).
    
    Methods:
    __init__(): Initializes the linked list (starting with an empty list).
    insert_term(coeff, exp): Inserts a new term with a given coefficient 
    and exponent into the polynomial.
    add(p): Adds the current polynomial to another polynomial p, and 
    returns the resulting polynomial as a new linked list.
    mult(p): Multiplies the current polynomial with another polynomial p, 
    and returns the resulting polynomial as a new linked list.
    __str__(): Returns a string representation of the polynomial as a sum of its terms.
    """
    def __init__(self):
        """
        Initializes the linked list with an empty list.

        The list starts with the head set to None.
        """
        # You are also welcome to use a sentinel/dummy node!
        # It is definitely recommended, which will we learn more
        # about in class on Monday 3/24. If you choose to use
        # a dummy node, comment out the self.head = None
        # and comment in the below line. We use None to make sure
        # if there is an error where you accidentally include the
        # dummy node in your calculation, it will throw an error.
        # self.dummy = Node(None, None)
        self.head = None

    # Insert the term with the coefficient coeff and exponent exp into the polynomial.
    # If a term with that exponent already exists, add the coefficients together.
    # You must keep the terms in descending order by exponent.
    def insert_term(self, coeff, exp):
        """
        Inserts a term with a given coefficient and exponent into the polynomial.

        If a term with the same exponent already exists, the coefficients are combined.
        Terms are inserted in descending order by exponent.

        Args:
        coeff (int): The coefficient of the term.
        exp (int): The exponent of the term.
        """
        new_node = Node(coeff, exp)
        if coeff == 0:
            return
        if self.head is None:
            self.head = new_node
            return

        current = self.head
        previous = None

        while current is not None and current.exp > exp:
            previous = current
            current = current.next

        if current is not None and current.exp == exp:
            new_coeff = current.coeff + coeff
            if new_coeff == 0:
                if previous is None:
                    self.head = current.next
                else:
                    previous.next = current.next
            else:
                current.coeff = new_coeff
            return
        new_node.next = current
        if previous is None:
            self.head = new_node
        else:
            previous.next = new_node

    # Add a polynomial p to the polynomial and return the resulting polynomial as a new linked list.
    def add(self, p):
        """
        Adds the current polynomial to another polynomial and 
        returns the resulting polynomial as a new linked list.
        The terms from both polynomials are added together. 
        If terms with the same exponent are found, 
        their coefficients are summed. The result is sorted in descending order by exponent.

        Args:
        p (LinkedList): The polynomial to add to the current polynomial.

        Returns:
        LinkedList: A new linked list representing the sum of the two polynomials.
        """
        result = LinkedList()

        current = self.head  # or p.head if you're traversing the other list

        while current is not None:
            coeff = current.coeff
            exp = current.exp
            result.insert_term(coeff, exp)
            current = current.next

        current = p.head
        while current is not None:
            coeff = current.coeff
            exp = current.exp
            result.insert_term(coeff, exp)
            current = current.next

        return result

    # Multiply a polynomial p with the polynomial and return the product as a new linked list.
    def mult(self, p):
        """
        Multiplies the current polynomial with another polynomial 
        and returns the resulting polynomial as a new linked list.

        The multiplication is done term by term, where each term in 
        the first polynomial is multiplied by each term in the second polynomial. 
        The result is sorted in descending order by exponent.

        Args:
        p (LinkedList): The polynomial to multiply with the current polynomial.

        Returns:
        LinkedList: A new linked list representing the product of the two polynomials.
        """
        result = LinkedList()

        current = self.head
        while current:
            temp = LinkedList()

            other = p.head
            while other:
                temp.insert_term(current.coeff * other.coeff, current.exp + other.exp)
                other = other.next

            result = result.add(temp)
            current = current.next

        return result

    # Return a string representation of the polynomial.
    def __str__(self):
        if self.head is None:
            return ""

        terms = []
        current = self.head

        while current:
            terms.append(f"({current.coeff}, {current.exp})")
            current = current.next

        return " + ".join(terms)


def main():
    """
    Main function that reads polynomial data from stdin (terminal or file), 
    creates two polynomials, and prints the sum and product of the two polynomials.

    It first reads the number of terms for each polynomial, creates the polynomials, 
    then computes and prints the sum and product of the two polynomials.

    The sum and product are printed as string representations of the resulting polynomials.
    """
    # read data from stdin (terminal/file) using input() and create polynomial p

    # read data from stdin (terminal/file) using input() and create polynomial q

    # get sum of p and q as a new linked list and print sum

    # get product of p and q as a new linked list and print product
    n = int(input().strip())
    p = LinkedList()
    for _ in range(n):
        coeff, exp = map(int, input().split())
        p.insert_term(coeff, exp)

    input()

    m = int(input().strip())
    q = LinkedList()
    for _ in range(m):
        coeff, exp = map(int, input().split())
        q.insert_term(coeff, exp)

    print(p.add(q))

    print(p.mult(q))


if __name__ == "__main__":
    main()
